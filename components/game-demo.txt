"use client"

import { useState } from "react"
import FairPlaySDK from "../fair-play-module/sdk"
import { useWallet } from "@txnlab/use-wallet-react"
import * as algosdk from "algosdk"


interface GameResult {
  id: number
  bet: number
  playerChoice: string
  computerChoice: string
  result: "win" | "lose" | "draw"
  multiplier: number
  timestamp: Date
  txId?: string
  matchId?: string
}

const CHOICES = ["Rock", "Paper", "Scissors"]
const CHOICE_EMOJIS: Record<string, string> = {
  Rock: "ü™®",
  Paper: "üìÑ",
  Scissors: "‚úÇÔ∏è",
}

interface GameDemoProps {
  walletAddress: string
}

export function GameDemo({ walletAddress }: GameDemoProps) {
  const [balance, setBalance] = useState(1000)
  const [betAmount, setBetAmount] = useState(10)
  const [gameResults, setGameResults] = useState<GameResult[]>([])
  const [isPlaying, setIsPlaying] = useState(false)
  const [selectedChoice, setSelectedChoice] = useState<string | null>(null)

  const [matchId, setMatchId] = useState<string | null>(null)
  const [opponentAddress, setOpponentAddress] = useState("")
  const [gameStatus, setGameStatus] = useState<"idle" | "creating" | "committed" | "revealing" | "settled">("idle")
  const [salt, setSalt] = useState<string | null>(null)
  const [currentBet, setCurrentBet] = useState(0)
  const [showCreateMatch, setShowCreateMatch] = useState(true)
  const [opponentInput, setOpponentInput] = useState("")
  const [matchIdInput, setMatchIdInput] = useState("")
  const { signTransactions, activeAddress, algodClient } = useWallet()

  const APP_ID = 748562589; // Your application ID
  const ALGOD_TOKEN = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
  const ALGOD_SERVER = "https://testnet-api.algonode.cloud";
  const ALGOD_PORT = "";

  const sdk = new FairPlaySDK(APP_ID, ALGOD_TOKEN, ALGOD_SERVER, ALGOD_PORT);

  const generateSalt = (): string => {
    return Math.random().toString(36).substring(2, 15)
  }

  const createMatch = async () => {
    if (!opponentInput || !betAmount || !activeAddress) {
        console.error("Missing opponent address, bet amount, or active wallet address.");
        return;
    }

    try {
      setGameStatus("creating")

      const unsignedTxns = await sdk.createMatch(
          activeAddress,
          activeAddress,
          opponentInput,
          betAmount
      );

      const encodedTxns = unsignedTxns.map(txn => algosdk.encodeUnsignedTransaction(txn));

      const signedTxnsResult = await signTransactions(encodedTxns);
      const signedTxns = signedTxnsResult.filter(txn => txn !== null);
      if (signedTxns.length === 0) {
        console.error("Transaction signing was cancelled.");
        setGameStatus("idle");
        return;
      }

      // 2. Use algodClient to send the signed transaction
      const response = await algodClient.sendRawTransaction(signedTxns).do();
      const txid = response.txid;
      
      // 3. (Recommended) Wait for the transaction to be confirmed
      await algosdk.waitForConfirmation(algodClient, txid, 4);

      console.log("Match creation transaction confirmed with ID:", txid);
      
      // Now you can proceed with your UI updates
      setMatchId(txid) // Or parse the result to get a specific match ID
      setCurrentBet(betAmount)
      setShowCreateMatch(false)
      setGameStatus("idle")

    } catch (error) {
      console.error("Error creating match:", error)
      setGameStatus("idle")
    }
  }

  const joinMatch = async () => {
    if (!matchIdInput) return
    try {
      setGameStatus("creating")
      const state = await sdk.getMatchState(matchIdInput)
      setMatchId(matchIdInput)
      setCurrentBet(Number(state.wager))
      setShowCreateMatch(false)
      setGameStatus("idle")
    } catch (error) {
      console.error("Error joining match:", error)
      setGameStatus("idle")
    }
  }

  const commitMove = async (choice: string) => {
    // Guard clauses should now check for activeAddress
    if (!matchId || !activeAddress || betAmount > balance || isPlaying) return;

    setSelectedChoice(choice);
    setIsPlaying(true);
    setGameStatus("committed");

    try {
      const newSalt = generateSalt();
      setSalt(newSalt);

      // 1. Call the updated SDK method (no private key) to get the unsigned transaction
      const unsignedTxns = await sdk.commitMove(activeAddress, matchId, choice, newSalt);

      // 2. Encode, sign, filter nulls, and send the transaction
      const encodedTxns = unsignedTxns.map(txn => algosdk.encodeUnsignedTransaction(txn));
      const signedTxnsResult = await signTransactions(encodedTxns);
      const signedTxns = signedTxnsResult.filter(txn => txn !== null);

      if (signedTxns.length === 0) {
        throw new Error("Transaction signing was cancelled.");
      }

      const { txid } = await algodClient.sendRawTransaction(signedTxns).do();
      await algosdk.waitForConfirmation(algodClient, txid, 4);
      const txId = txid;

      // 3. Store the confirmed transaction ID in your state
      const gameResult: GameResult = {
        id: gameResults.length + 1,
        bet: betAmount,
        playerChoice: choice,
        computerChoice: "",
        result: "draw", // This is a temporary state until revealed
        multiplier: 0,
        timestamp: new Date(),
        txId, // Now this is a string and matches the expected type
        matchId,
      };

      setGameResults([gameResult, ...gameResults]);

    } catch (error) {
      console.error("Error committing move:", error);
      // Reset state on failure
      setGameStatus("idle");
      setIsPlaying(false);
      setSelectedChoice(null);
    }
  };

  const revealMove = async () => {
    if (!matchId || !salt || !selectedChoice) return

    try {
      setGameStatus("revealing")
      const txId = await sdk.revealMove(walletAddress, matchId, selectedChoice, salt)

      // Resolve match to get result
      const result = await sdk.resolveMatch(walletAddress, matchId)

      let multiplier = 0
      let newBalance = balance

      if (result.winner === walletAddress) {
        multiplier = 2
        newBalance = balance + betAmount
      } else if (result.winner === "draw") {
        multiplier = 1
        newBalance = balance
      } else {
        multiplier = 0
        newBalance = balance - betAmount
      }

      // Update game results with final outcome
      const updatedResults = [...gameResults]
      if (updatedResults.length > 0) {
        updatedResults[0] = {
          ...updatedResults[0],
          computerChoice: result.opponentMove,
          result: result.winner === walletAddress ? "win" : result.winner === "draw" ? "draw" : "lose",
          multiplier,
          txId,
        }
      }

      setGameResults(updatedResults)
      setBalance(newBalance)
      setGameStatus("settled")
      setIsPlaying(false)
      setSelectedChoice(null)
      setSalt(null)

      // Reset for next game
      setTimeout(() => {
        setMatchId(null)
        setShowCreateMatch(true)
        setGameStatus("idle")
      }, 2000)
    } catch (error) {
      console.error("Error revealing move:", error)
      setGameStatus("committed")
    }
  }

  return (
    <div className="space-y-8">
      {showCreateMatch && (
        <div className="rounded-xl border border-border bg-card p-8">
          <h3 className="mb-6 text-lg font-bold text-foreground">Create or Join a Match</h3>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">Opponent Address</label>
              <input
                type="text"
                placeholder="Enter opponent wallet address"
                value={opponentInput}
                onChange={(e) => setOpponentInput(e.target.value)}
                className="w-full px-4 py-2 rounded-lg border border-border bg-background text-foreground"
              />
            </div>
            <button
              onClick={createMatch}
              disabled={gameStatus === "creating" || !opponentInput}
              className="w-full py-2 px-4 rounded-lg bg-primary text-primary-foreground font-bold hover:opacity-90 disabled:opacity-50"
            >
              {gameStatus === "creating" ? "Creating..." : "Create Match"}
            </button>

            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-border" />
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-2 bg-card text-muted-foreground">Or</span>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-foreground mb-2">Join Existing Match</label>
              <input
                type="text"
                placeholder="Enter match ID"
                value={matchIdInput}
                onChange={(e) => setMatchIdInput(e.target.value)}
                className="w-full px-4 py-2 rounded-lg border border-border bg-background text-foreground"
              />
            </div>
            <button
              onClick={joinMatch}
              disabled={gameStatus === "creating" || !matchIdInput}
              className="w-full py-2 px-4 rounded-lg bg-secondary text-secondary-foreground font-bold hover:opacity-90 disabled:opacity-50"
            >
              {gameStatus === "creating" ? "Joining..." : "Join Match"}
            </button>
          </div>
        </div>
      )}

      {/* Game Controls */}
      {!showCreateMatch && (
        <div className="rounded-xl border border-border bg-card p-8">
          <div className="mb-8">
            <div className="mb-2 flex items-center justify-between">
              <span className="text-sm font-medium text-muted-foreground">Your Balance</span>
              <span className="text-3xl font-bold text-primary">{balance} ALGO</span>
            </div>
            <div className="h-2 w-full rounded-full bg-muted overflow-hidden">
              <div
                className="h-full bg-gradient-to-r from-primary to-secondary transition-all duration-300"
                style={{ width: `${Math.min((balance / 1000) * 100, 100)}%` }}
              />
            </div>
          </div>

          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">Bet Amount (ALGO)</label>
              <input
                type="number"
                min="1"
                max={balance}
                value={betAmount}
                onChange={(e) => setBetAmount(Math.max(1, Number.parseInt(e.target.value) || 0))}
                disabled={isPlaying || gameStatus !== "idle"}
                className="w-full px-4 py-2 rounded-lg border border-border bg-background text-foreground disabled:opacity-50"
              />
            </div>

            <div className="text-sm text-muted-foreground">
              <p>
                Status:{" "}
                <span className="font-bold text-foreground">
                  {gameStatus === "idle"
                    ? "Ready to Play"
                    : gameStatus === "committed"
                      ? "Waiting for Opponent / Ready to Reveal"
                      : gameStatus === "revealing"
                        ? "Revealing Move..."
                        : "Match Settled"}
                </span>
              </p>
              {matchId && <p>Match ID: {matchId.substring(0, 8)}...</p>}
            </div>

            <div>
              <label className="block text-sm font-medium text-foreground mb-3">Choose Your Move</label>
              <div className="grid grid-cols-3 gap-3">
                {CHOICES.map((choice) => (
                  <button
                    key={choice}
                    onClick={() => commitMove(choice)}
                    disabled={isPlaying || betAmount > balance || gameStatus !== "idle"}
                    className={`py-4 px-3 rounded-lg font-bold transition-all ${
                      selectedChoice === choice && isPlaying
                        ? "bg-primary text-primary-foreground scale-95"
                        : "bg-muted text-foreground hover:bg-muted/80 disabled:opacity-50 disabled:cursor-not-allowed"
                    }`}
                  >
                    <div className="text-2xl mb-1">{CHOICE_EMOJIS[choice]}</div>
                    <div className="text-xs">{choice}</div>
                  </button>
                ))}
              </div>
            </div>

            {gameStatus === "committed" && selectedChoice && (
              <button
                onClick={revealMove}
                className="w-full py-3 px-4 rounded-lg bg-primary text-primary-foreground font-bold hover:opacity-90"
              >
                Reveal Your Move
              </button>
            )}

            {isPlaying && gameStatus === "committed" && (
              <div className="text-center py-4">
                <p className="text-sm text-muted-foreground animate-pulse">Move committed... Waiting for opponent...</p>
              </div>
            )}

            {gameStatus === "revealing" && (
              <div className="text-center py-4">
                <p className="text-sm text-muted-foreground animate-pulse">Revealing move...</p>
              </div>
            )}

            {gameStatus === "settled" && (
              <div className="text-center py-4">
                <p className="text-sm text-green-600 font-bold">Match settled! Starting new game...</p>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Game Results */}
      {gameResults.length > 0 && (
        <div className="rounded-xl border border-border bg-card p-8">
          <h3 className="mb-6 text-lg font-bold text-foreground">Game History</h3>
          <div className="space-y-3 max-h-96 overflow-y-auto">
            {gameResults.map((result) => (
              <div
                key={result.id}
                className={`flex items-center justify-between p-4 rounded-lg border ${
                  result.result === "win"
                    ? "bg-green-50 border-green-200"
                    : result.result === "draw"
                      ? "bg-blue-50 border-blue-200"
                      : "bg-red-50 border-red-200"
                }`}
              >
                <div className="flex items-center gap-4">
                  <div className="text-2xl">{result.result === "win" ? "‚úì" : result.result === "draw" ? "=" : "‚úó"}</div>
                  <div>
                    <p
                      className={`font-bold ${
                        result.result === "win"
                          ? "text-green-700"
                          : result.result === "draw"
                            ? "text-blue-700"
                            : "text-red-700"
                      }`}
                    >
                      {result.result === "win" ? "Won" : result.result === "draw" ? "Draw" : "Lost"} {result.bet} ALGO
                    </p>
                    <p className="text-xs text-muted-foreground">
                      {result.playerChoice && CHOICE_EMOJIS[result.playerChoice]}{" "}
                      {result.computerChoice && `vs ${CHOICE_EMOJIS[result.computerChoice]}`} ‚Ä¢{" "}
                      {result.timestamp.toLocaleTimeString()}
                    </p>
                    {result.txId && (
                      <p className="text-xs text-muted-foreground mt-1">
                        TX: <span className="font-mono">{result.txId.substring(0, 12)}...</span>
                      </p>
                    )}
                  </div>
                </div>
                <span
                  className={`text-lg font-bold ${
                    result.result === "win"
                      ? "text-green-700"
                      : result.result === "draw"
                        ? "text-blue-700"
                        : "text-red-700"
                  }`}
                >
                  {result.result === "win" ? "+" : result.result === "draw" ? "¬±" : "-"}
                  {result.bet * result.multiplier} ALGO
                </span>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  )
}
